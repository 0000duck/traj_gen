# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from traj_gen/PolySplineXYZ.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import traj_gen.msg

class PolySplineXYZ(genpy.Message):
  _md5sum = "cde8ea48996e4cbc3defb260ac40b943"
  _type = "traj_gen/PolySplineXYZ"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool is_valid
traj_gen/PolySpline spline_x
traj_gen/PolySpline spline_y 
traj_gen/PolySpline spline_z
int8 n_seg
int8 poly_order
float64[] knot_time 

================================================================================
MSG: traj_gen/PolySpline
traj_gen/PolyCoeff[] poly_coeff
float64[] knot_time 
int8 n_seg
bool is_valid



================================================================================
MSG: traj_gen/PolyCoeff
float64[] coeff
int8 poly_order


"""
  __slots__ = ['is_valid','spline_x','spline_y','spline_z','n_seg','poly_order','knot_time']
  _slot_types = ['bool','traj_gen/PolySpline','traj_gen/PolySpline','traj_gen/PolySpline','int8','int8','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       is_valid,spline_x,spline_y,spline_z,n_seg,poly_order,knot_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PolySplineXYZ, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.is_valid is None:
        self.is_valid = False
      if self.spline_x is None:
        self.spline_x = traj_gen.msg.PolySpline()
      if self.spline_y is None:
        self.spline_y = traj_gen.msg.PolySpline()
      if self.spline_z is None:
        self.spline_z = traj_gen.msg.PolySpline()
      if self.n_seg is None:
        self.n_seg = 0
      if self.poly_order is None:
        self.poly_order = 0
      if self.knot_time is None:
        self.knot_time = []
    else:
      self.is_valid = False
      self.spline_x = traj_gen.msg.PolySpline()
      self.spline_y = traj_gen.msg.PolySpline()
      self.spline_z = traj_gen.msg.PolySpline()
      self.n_seg = 0
      self.poly_order = 0
      self.knot_time = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.is_valid))
      length = len(self.spline_x.poly_coeff)
      buff.write(_struct_I.pack(length))
      for val1 in self.spline_x.poly_coeff:
        length = len(val1.coeff)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.coeff))
        buff.write(_get_struct_b().pack(val1.poly_order))
      length = len(self.spline_x.knot_time)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.spline_x.knot_time))
      _x = self
      buff.write(_get_struct_bB().pack(_x.spline_x.n_seg, _x.spline_x.is_valid))
      length = len(self.spline_y.poly_coeff)
      buff.write(_struct_I.pack(length))
      for val1 in self.spline_y.poly_coeff:
        length = len(val1.coeff)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.coeff))
        buff.write(_get_struct_b().pack(val1.poly_order))
      length = len(self.spline_y.knot_time)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.spline_y.knot_time))
      _x = self
      buff.write(_get_struct_bB().pack(_x.spline_y.n_seg, _x.spline_y.is_valid))
      length = len(self.spline_z.poly_coeff)
      buff.write(_struct_I.pack(length))
      for val1 in self.spline_z.poly_coeff:
        length = len(val1.coeff)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.coeff))
        buff.write(_get_struct_b().pack(val1.poly_order))
      length = len(self.spline_z.knot_time)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.spline_z.knot_time))
      _x = self
      buff.write(_get_struct_bB2b().pack(_x.spline_z.n_seg, _x.spline_z.is_valid, _x.n_seg, _x.poly_order))
      length = len(self.knot_time)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.knot_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.spline_x is None:
        self.spline_x = traj_gen.msg.PolySpline()
      if self.spline_y is None:
        self.spline_y = traj_gen.msg.PolySpline()
      if self.spline_z is None:
        self.spline_z = traj_gen.msg.PolySpline()
      end = 0
      start = end
      end += 1
      (self.is_valid,) = _get_struct_B().unpack(str[start:end])
      self.is_valid = bool(self.is_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.spline_x.poly_coeff = []
      for i in range(0, length):
        val1 = traj_gen.msg.PolyCoeff()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.coeff = struct.unpack(pattern, str[start:end])
        start = end
        end += 1
        (val1.poly_order,) = _get_struct_b().unpack(str[start:end])
        self.spline_x.poly_coeff.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.spline_x.knot_time = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 2
      (_x.spline_x.n_seg, _x.spline_x.is_valid,) = _get_struct_bB().unpack(str[start:end])
      self.spline_x.is_valid = bool(self.spline_x.is_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.spline_y.poly_coeff = []
      for i in range(0, length):
        val1 = traj_gen.msg.PolyCoeff()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.coeff = struct.unpack(pattern, str[start:end])
        start = end
        end += 1
        (val1.poly_order,) = _get_struct_b().unpack(str[start:end])
        self.spline_y.poly_coeff.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.spline_y.knot_time = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 2
      (_x.spline_y.n_seg, _x.spline_y.is_valid,) = _get_struct_bB().unpack(str[start:end])
      self.spline_y.is_valid = bool(self.spline_y.is_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.spline_z.poly_coeff = []
      for i in range(0, length):
        val1 = traj_gen.msg.PolyCoeff()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.coeff = struct.unpack(pattern, str[start:end])
        start = end
        end += 1
        (val1.poly_order,) = _get_struct_b().unpack(str[start:end])
        self.spline_z.poly_coeff.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.spline_z.knot_time = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 4
      (_x.spline_z.n_seg, _x.spline_z.is_valid, _x.n_seg, _x.poly_order,) = _get_struct_bB2b().unpack(str[start:end])
      self.spline_z.is_valid = bool(self.spline_z.is_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.knot_time = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.is_valid))
      length = len(self.spline_x.poly_coeff)
      buff.write(_struct_I.pack(length))
      for val1 in self.spline_x.poly_coeff:
        length = len(val1.coeff)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.coeff.tostring())
        buff.write(_get_struct_b().pack(val1.poly_order))
      length = len(self.spline_x.knot_time)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.spline_x.knot_time.tostring())
      _x = self
      buff.write(_get_struct_bB().pack(_x.spline_x.n_seg, _x.spline_x.is_valid))
      length = len(self.spline_y.poly_coeff)
      buff.write(_struct_I.pack(length))
      for val1 in self.spline_y.poly_coeff:
        length = len(val1.coeff)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.coeff.tostring())
        buff.write(_get_struct_b().pack(val1.poly_order))
      length = len(self.spline_y.knot_time)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.spline_y.knot_time.tostring())
      _x = self
      buff.write(_get_struct_bB().pack(_x.spline_y.n_seg, _x.spline_y.is_valid))
      length = len(self.spline_z.poly_coeff)
      buff.write(_struct_I.pack(length))
      for val1 in self.spline_z.poly_coeff:
        length = len(val1.coeff)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.coeff.tostring())
        buff.write(_get_struct_b().pack(val1.poly_order))
      length = len(self.spline_z.knot_time)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.spline_z.knot_time.tostring())
      _x = self
      buff.write(_get_struct_bB2b().pack(_x.spline_z.n_seg, _x.spline_z.is_valid, _x.n_seg, _x.poly_order))
      length = len(self.knot_time)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.knot_time.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.spline_x is None:
        self.spline_x = traj_gen.msg.PolySpline()
      if self.spline_y is None:
        self.spline_y = traj_gen.msg.PolySpline()
      if self.spline_z is None:
        self.spline_z = traj_gen.msg.PolySpline()
      end = 0
      start = end
      end += 1
      (self.is_valid,) = _get_struct_B().unpack(str[start:end])
      self.is_valid = bool(self.is_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.spline_x.poly_coeff = []
      for i in range(0, length):
        val1 = traj_gen.msg.PolyCoeff()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.coeff = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 1
        (val1.poly_order,) = _get_struct_b().unpack(str[start:end])
        self.spline_x.poly_coeff.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.spline_x.knot_time = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 2
      (_x.spline_x.n_seg, _x.spline_x.is_valid,) = _get_struct_bB().unpack(str[start:end])
      self.spline_x.is_valid = bool(self.spline_x.is_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.spline_y.poly_coeff = []
      for i in range(0, length):
        val1 = traj_gen.msg.PolyCoeff()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.coeff = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 1
        (val1.poly_order,) = _get_struct_b().unpack(str[start:end])
        self.spline_y.poly_coeff.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.spline_y.knot_time = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 2
      (_x.spline_y.n_seg, _x.spline_y.is_valid,) = _get_struct_bB().unpack(str[start:end])
      self.spline_y.is_valid = bool(self.spline_y.is_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.spline_z.poly_coeff = []
      for i in range(0, length):
        val1 = traj_gen.msg.PolyCoeff()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.coeff = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 1
        (val1.poly_order,) = _get_struct_b().unpack(str[start:end])
        self.spline_z.poly_coeff.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.spline_z.knot_time = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 4
      (_x.spline_z.n_seg, _x.spline_z.is_valid, _x.n_seg, _x.poly_order,) = _get_struct_bB2b().unpack(str[start:end])
      self.spline_z.is_valid = bool(self.spline_z.is_valid)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.knot_time = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_bB2b = None
def _get_struct_bB2b():
    global _struct_bB2b
    if _struct_bB2b is None:
        _struct_bB2b = struct.Struct("<bB2b")
    return _struct_bB2b
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
_struct_bB = None
def _get_struct_bB():
    global _struct_bB
    if _struct_bB is None:
        _struct_bB = struct.Struct("<bB")
    return _struct_bB
